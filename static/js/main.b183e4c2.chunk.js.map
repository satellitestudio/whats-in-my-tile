{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","sourceLayer","data","setData","onDrop","useCallback","acceptedFiles","forEach","file","reader","FileReader","onabort","console","log","onerror","onload","binaryStr","result","pbf","Pbf","vectorTile","VectorTile","length","layers","Object","keys","sourceLayerName","sourceLayerFeatures","index","feature","push","extent","type","properties","readAsArrayBuffer","useDropzone","getRootProps","getInputProps","isDragActive","className","theme","hideRoot","shouldExpandNode","keyPath","level","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0OAgFeA,MAzEf,WAAgB,IAAD,EACWC,mBAAS,CAAEC,YAAa,CAAE,MADrC,mBACNC,EADM,KACAC,EADA,KAEPC,EAASC,uBAAY,SAAAC,GACzBA,EAAcC,SAAQ,SAACC,GACrB,IAAMC,EAAS,IAAIC,WAEnBD,EAAOE,QAAU,kBAAMC,QAAQC,IAAI,6BACnCJ,EAAOK,QAAU,kBAAMF,QAAQC,IAAI,4BACnCJ,EAAOM,OAAS,WACd,IAAMC,EAAYP,EAAOQ,OACzBL,QAAQC,IAAIG,GACZ,IAAME,EAAM,IAAIC,IAAIH,GACdI,EAAa,IAAIC,aAAWH,GAE5BhB,EAAO,GAEbU,QAAQC,IAAI,cAAeK,EAAII,QAE/B,IAAMC,EAASH,EAAWG,OAE1BC,OAAOC,KAAKF,GAAQhB,SAAQ,SAAAmB,GAG1B,IAFA,IAAMC,EAAsB,GACtB1B,EAAcsB,EAAOG,GAClBE,EAAQ,EAAGA,EAAQ3B,EAAYqB,OAAQM,IAAS,CACvD,IAAMC,EAAU5B,EAAY4B,QAAQD,GACpCD,EAAoBG,KAAK,CACvBC,OAAQF,EAAQE,OAChBC,KAAMH,EAAQG,KACdC,WAAYJ,EAAQI,aAGxB/B,EAAKwB,GAAmBC,KAG1BxB,EAAQD,GACRU,QAAQC,IAAIX,IAadO,EAAOyB,kBAAkB1B,QAE1B,IAlDU,EAmDuC2B,YAAY,CAAC/B,WAA1DgC,EAnDM,EAmDNA,aAAcC,EAnDR,EAmDQA,cAAeC,EAnDvB,EAmDuBA,aAEpC,OACE,oCACE,kDACA,yCAASF,IAAT,CAAyBG,UAAU,aACjC,0BAAWF,KAETC,EACE,sDACA,6FAGN,kBAAC,IAAD,CAAUpC,KAAMA,EAAMsC,MAAM,QAAQC,UAAU,EAAMC,iBAAkB,SAACC,EAASzC,EAAM0C,GACpF,QAAc,IAAVA,IAAeD,GAA0B,eAAfA,EAAQ,QACxB,IAAVC,IAAeD,GAA0B,IAAfA,EAAQ,MAClCC,EAAQ,QAAZ,SC9DYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.b183e4c2.chunk.js","sourcesContent":["import React, {useCallback, useState} from 'react'\nimport {useDropzone} from 'react-dropzone'\nimport JSONTree from 'react-json-tree'\nimport Pbf from 'pbf'\nimport { VectorTile } from '@mapbox/vector-tile'\n\n\nfunction App() {\n  const [data, setData] = useState({ sourceLayer: [ {} ] })\n  const onDrop = useCallback(acceptedFiles => {\n    acceptedFiles.forEach((file) => {\n      const reader = new FileReader()\n\n      reader.onabort = () => console.log('file reading was aborted')\n      reader.onerror = () => console.log('file reading has failed')\n      reader.onload = () => {\n        const binaryStr = reader.result\n        console.log(binaryStr)\n        const pbf = new Pbf(binaryStr)\n        const vectorTile = new VectorTile(pbf)\n\n        const data = {}\n\n        console.log('pbf length:', pbf.length)\n        \n        const layers = vectorTile.layers\n\n        Object.keys(layers).forEach(sourceLayerName => {\n          const sourceLayerFeatures = []\n          const sourceLayer = layers[sourceLayerName]\n          for (let index = 0; index < sourceLayer.length; index++) {\n            const feature = sourceLayer.feature(index)\n            sourceLayerFeatures.push({\n              extent: feature.extent,\n              type: feature.type,\n              properties: feature.properties,\n            })\n          }\n          data[sourceLayerName] = sourceLayerFeatures\n        })\n\n        setData(data)\n        console.log(data)\n\n        // const mainLayerName = Object.keys(layers)[0]\n        // console.log('layer name:', mainLayerName)\n        // const mainLayer = layers[mainLayerName]\n        // console.log('layer length', mainLayer.length)\n        // const aFeature = mainLayer.feature(0)\n        // console.log('example feature type:', aFeature.type)\n        // console.log('example feature:', aFeature.properties)\n        // console.log('example feature:bbox:', aFeature.bbox())\n        // console.log('example feature to GeoJSON')\n        // console.log( aFeature.toGeoJSON(5,26,16))\n      }\n      reader.readAsArrayBuffer(file)\n    })\n  }, [])\n  const {getRootProps, getInputProps, isDragActive} = useDropzone({onDrop})\n\n  return (\n    <>\n      <h1>What's in my tile?</h1>\n      <div {...getRootProps()} className=\"dropZone\">\n        <input {...getInputProps()} />\n        {\n          isDragActive ?\n            <p>Drop the files here ...</p> :\n            <p>Drag 'n' drop a PBF vector tile here, or click to select file</p>\n        }\n      </div>\n      <JSONTree data={data} theme=\"chalk\" hideRoot={true} shouldExpandNode={(keyPath, data, level) => {\n        if (level === 3 && keyPath && keyPath[0] === 'properties') return true\n        if (level === 2 && keyPath && keyPath[0] === 0) return true\n        if (level < 2) return true\n      }} />\n    </>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}